import tensorflow as tf
import numpy as np
import pickle, os

from settings import *

# for using tensorflow as hyper parameter
INPUT_SIZE = 12288
OUTPUT_SIZE = 2


def load_data():
    print('Data Loding starts')
    csv_data = np.loadtxt(LABEL_PATH, delimiter=',', dtype=np.str)

    x_data = csv_data[:, [0]]
    y_data = csv_data[:, [1]]

    ben_data_list = []
    mal_data_list = []

    for md5, detected in zip(x_data, y_data):
        full_path = os.path.join(TEST_DATA_PATH, md5[0] + '.fh')
        try:
            with open(full_path, 'rb') as f:
                fh_vector = pickle.load(f)
            if detected[0] == 'TRUE':
                mal_data_list.append(fh_vector)
            else:
                ben_data_list.append(fh_vector)
        except:
            pass

    print('{CNT} Data reading finished'.format(CNT=len(ben_data_list) + len(mal_data_list)))

    return ben_data_list, mal_data_list


def run():
    print("Test Binary Classification")
    ben_data_list, mal_data_list = load_data()

    test_data_list = ben_data_list + mal_data_list
    ben_label_list = [ [ 1, 0 ] for i in range(len(ben_data_list)) ]
    mal_label_list = [ [ 0, 1 ] for i in range(len(mal_data_list)) ]
    test_label_list = ben_data_list + mal_label_list

    print('Load ANN network architecture')
    with tf.device('/gpu:1'):
        # ANN network architecture
        prob = tf.placeholder(tf.float32)

        x = tf.placeholder(tf.float32, shape=[None, INPUT_SIZE])
        y = tf.placeholder(tf.float32, shape=[None, OUTPUT_SIZE])

        dense_layer_1 = tf.layers.dense(inputs=x, units=4096, activation=tf.nn.relu)
        dense_drop_1 = tf.nn.dropout(dense_layer_1, prob)
        dense_layer_2 = tf.layers.dense(inputs=dense_drop_1, units=1024, activation=tf.nn.relu)
        dense_drop_2 = tf.nn.dropout(dense_layer_2, prob)
        dense_layer_3 = tf.layers.dense(inputs=dense_drop_2, units=256, activation=tf.nn.relu)
        dense_drop_3 = tf.nn.dropout(dense_layer_3, prob)
        dense_layer_4 = tf.layers.dense(inputs=dense_drop_3, units=64, activation=tf.nn.relu)
        dense_drop_4 = tf.nn.dropout(dense_layer_4, prob)
        dense_layer_5 = tf.layers.dense(inputs=dense_drop_4, units=16, activation=tf.nn.relu)
        dense_drop_5 = tf.nn.dropout(dense_layer_5, prob)

        y_ = tf.layers.dense(inputs=dense_drop_5, units=OUTPUT_SIZE)

    # predict
    prediction = tf.equal(tf.argmax(y_, 1), tf.argmax(y, 1))
    accuracy = tf.reduce_mean(tf.cast(prediction, tf.float32))

    print('Test session start')
    # training session start
    model_saver = tf.train.Saver()
    init = tf.global_variables_initializer()

    with tf.Session(config=tf.ConfigProto(allow_soft_placement=True, log_device_placement=True)) as sess:
        sess.run(init)
        try:
            model_saver.restore(sess, CHECK_POINT)
        except:
            pass
        print('Test start')
        print("Ben : {}".format(len(ben_data_list)), sess.run(accuracy, feed_dict={x: ben_data_list, y: ben_label_list, prob: 1}))
        print("Mal : {}".format(len(mal_data_list)), sess.run(accuracy, feed_dict={x: mal_data_list, y: mal_label_list, prob: 1}))
        print("Total : {}".format(len(ben_data_list) + len(mal_data_list)), sess.run(accuracy, feed_dict={x: ben_data_list + mal_data_list, y:ben_label_list + mal_label_list, prob: 1}))
        print('------finish------')
        model_saver.save(sess, CHECK_POINT)


if __name__ == '__main__':
    run()